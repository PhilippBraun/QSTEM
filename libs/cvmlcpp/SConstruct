env    = SConscript('build/SConscript')
TARGET = ARGUMENTS.get('TARGET', '/usr/local')

# Install Directories
TARGETBIN   = TARGET + '/bin'
TARGETLIB   = TARGET + '/lib'
TARGETINC   = TARGET + '/include/cvmlcpp'
TARGETDOC   = TARGET + '/share/doc/cvmlcpp'
TARGETBLD   = TARGET + '/share/cvmlcpp'
TARGETOMPTL = TARGET + '/include'

SRC    = ['/array', '/base', '/math', '/signal', '/volume']
LIBSRC = ['Storage.cc', 'SurfaceExtractor.cc']

staticCVMLCPP = env.StaticLibrary( 'cvmlcpp', LIBSRC )
sharedCVMLCPP = env.SharedLibrary( 'cvmlcpp', LIBSRC )

progs_voxelize = env.Program( 'bin/voxelize', 'voxelize.cc')
progs_fix_stl  = env.Program( 'bin/fix-stl', 'fix-stl.cc', LIBS='cvmlcpp', LIBPATH='.')

env.Install( TARGETBIN, [progs_voxelize, progs_fix_stl])
env.Install( TARGETDOC, 'doc' )
env.Install( TARGETINC, SRC )
env.Install( TARGETOMPTL, 'omptl' )
env.Install( TARGETLIB, [staticCVMLCPP, sharedCVMLCPP] )
env.Install( TARGETBLD, 'build' )

env.Alias('install', [TARGETBIN, TARGETDOC, TARGETINC, TARGETLIB, TARGETBLD, TARGETOMPTL])
